AWSTemplateFormatVersion: '2010-09-09'
Description: '<%= description %>'
Parameters:
  SoftwareVersion:
    Type: String
    Description: 'The software version'
  ImageId:
    Type: String
    Description: 'The OS image id'
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: 10.<%= range %>.0.0/16
      Tags:
        - Key: Name
          Value: <%= name %>
        - Key: COST
          Value: <%= cost %>
        - Key: Customer
          Value: <%= customer %>
  SubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Sub ${AWS::Region}a
      CidrBlock: 10.<%= range %>.0.0/24
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: <%= name %>A
        - Key: COST
          Value: <%= cost %>
        - Key: Customer
          Value: <%= customer %>
  SubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Sub ${AWS::Region}b
      CidrBlock: 10.<%= range %>.1.0/24
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: <%= name %>B
        - Key: COST
          Value: <%= cost %>
        - Key: Customer
          Value: <%= customer %>
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: <%= name %>IGW
        - Key: COST
          Value: <%= cost %>
        - Key: Customer
          Value: <%= customer %>
  GatewayToInternet:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: <%= name %>Routing
        - Key: COST
          Value: <%= cost %>
        - Key: Customer
          Value: <%= customer %>
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  SubnetARouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetA
      RouteTableId: !Ref PublicRouteTable
  SubnetBRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetB
      RouteTableId: !Ref PublicRouteTable
  ELBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security group for load balancer'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: <%= name %>-ELB
        - Key: COST
          Value: <%= cost %>
        - Key: Customer
          Value: <%= customer %>
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: 0.0.0.0/0
  ServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security group for servers'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: <%= name %>-Instance
        - Key: COST
          Value: <%= cost %>
        - Key: Customer
          Value: <%= customer %>
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref ELBSecurityGroup
        - IpProtocol: tcp
          FromPort: '<%= port %>'
          ToPort: '<%= port %>'
          SourceSecurityGroupId: !Ref ELBSecurityGroup
        - IpProtocol: icmp
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: 0.0.0.0/0
<% if (logging == 'cloudwatch') { %>
  CloudWatchLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: 14
<% } %>
  IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: <%= name %>InstancePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
<% if (logging == 'cloudwatch') { %>
              - Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Effect: Allow
                Resource: !GetAtt [CloudWatchLogGroup, Arn]
<% } %>
              - Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:GetRepositoryPolicy'
                  - 'ecr:DescribeRepositories'
                  - 'ecr:ListImages'
                  - 'ecr:BatchGetImage'
                Resource: '*'
                Effect: Allow
              - Action:
                  - 'cloudformation:SignalResource'
                Effect: Allow
                Resource:
                  - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*
              - Action:
                  - 'ec2:DescribeInstances'
                Effect: Allow
                Resource: '*'
  IAMInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref IAMRole

  LoadBalancerCertificate:
    Type: 'AWS::CertificateManager::Certificate'
    Properties:
      DomainName: '<%= hostname %>'
      DomainValidationOptions:
        - DomainName: '<%= hostname %>'
          ValidationDomain: '<%= domain %>'
      Tags:
        - Key: COST
          Value: <%= cost %>
        - Key: Customer
          Value: <%= customer %>
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref SubnetA
        - !Ref SubnetB
      SecurityGroups:
        - !Ref ELBSecurityGroup
      Tags:
        - Key: COST
          Value: <%= cost %>
        - Key: Customer
          Value: <%= customer %>
  HTTPTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      HealthCheckPath: /
      Matcher:
        HttpCode: '301'
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      Tags:
        - Key: COST
          Value: <%= cost %>
        - Key: Customer
          Value: <%= customer %>
  HTTPSTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      HealthCheckPath: <%= healthcheck %>
      Matcher:
        HttpCode: '200'
      Port: <%= port %>
      Protocol: HTTP
      UnhealthyThresholdCount: 3
      VpcId: !Ref VPC
      Tags:
        - Key: COST
          Value: <%= cost %>
        - Key: Customer
          Value: <%= customer %>
  HTTPListener:
    Type : 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref HTTPTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
  HTTPSListener:
    Type : 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      Certificates:
        - CertificateArn: !Ref LoadBalancerCertificate
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref HTTPSTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: 'ELBSecurityPolicy-2015-05'

  LaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      AssociatePublicIpAddress: true
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            DeleteOnTermination: true
            VolumeType: gp2
            VolumeSize: '8'
      EbsOptimized: false
      InstanceMonitoring: false
      IamInstanceProfile:
        Ref: IAMInstanceProfile
      ImageId: !Ref ImageId
      InstanceType: <%= instanceType %>
      SecurityGroups:
        - !Ref ServerSecurityGroup
      UserData:
        'Fn::Base64': !Sub
          - |
            #cloud-config

            ssh_authorized_keys:
              - INSERT SSH KEYS HERE

<% if (dvalin) { %>
            write_files:
              - path: "/opt/dvalin.properties"
                permissions: "0644"
                owner: "root"
                content: |
                  logger.layout=json
                  aws.mailregion=eu-west-1
                  aws.cfnsignal=true
<% } %>
            hostname: "<%= hostname %>"

            coreos:
              units:
                - name: update-engine.service
                  command: stop
                - name: locksmithd.service
                  command: stop
                - name: settimezone.service
                  command: start
                  content: |
                    [Unit]
                    Description=Set the time zone

                    [Service]
                    ExecStart=/usr/bin/timedatectl set-timezone Europe/Berlin
                    RemainAfterExit=yes
                    Type=oneshot
                - name: "redirector.service"
                  command: "start"
                  content: |
                    [Unit]
                    Description=TLS Redirector
                    After=docker.service

                    [Service]
                    Restart=always
                    Environment=IMAGE=taimos/redirector:latest
                    ExecStartPre=-/usr/bin/docker kill redirector
                    ExecStartPre=-/usr/bin/docker rm redirector
                    ExecStartPre=-/usr/bin/docker pull ${!IMAGE}
                    ExecStop=/usr/bin/docker stop -t 2 redirector
                    ExecStart=/usr/bin/docker run --restart=always -p 80:80 --name redirector ${!IMAGE}
<% if (logging == 'sumologic') { %>
                - name: "sumologic.service"
                  command: "start"
                  content: |
                    [Unit]
                    Description=Log shipper
                    After=docker.service

                    [Service]
                    Restart=always
                    Environment=IMAGE=taimos/fluentd-sumologic:latest
                    ExecStartPre=-/usr/bin/docker kill sumologic
                    ExecStartPre=-/usr/bin/docker rm sumologic
                    ExecStartPre=-/usr/bin/docker pull ${!IMAGE}
                    ExecStop=/usr/bin/docker stop -t 2 sumologic
                    ExecStart=/usr/bin/docker run --restart=always -p 24224:24224 --name sumologic \
                              -e SUMO_COLLECTOR=<%= sumoCollector %> \
                              -e SUMO_URLTOKEN=<%= sumoToken %> \
                              ${!IMAGE}
<% } %>
                - name: "server.service"
                  command: "start"
                  content: |
                    [Unit]
                    Description=<%= name %> Server
                    After=docker.service

                    [Service]
                    Restart=always
                    Environment=IMAGE=${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/<%= docker %>:${DockerTag}
                    TimeoutStartSec=infinity
                    ExecStartPre=-/usr/bin/docker kill server
                    ExecStartPre=-/usr/bin/docker rm server
                    ExecStartPre=/bin/bash -c 'eval $(docker run --rm crewjam/awscli:latest aws --region ${AWS::Region} ecr get-login)'
                    ExecStartPre=-/usr/bin/docker pull ${!IMAGE}
                    ExecStop=/usr/bin/docker stop -t 2 server
                    ExecStart=/usr/bin/docker run --restart=always \
                              -p <%= port %>:<%= port %> --name server \
<% if (logging == 'cloudwatch') { -%>
                              --log-driver awslogs --log-opt awslogs-region=${AWS::Region} --log-opt awslogs-group=${CloudWatchLogGroup} \
<% } -%>
<% if (logging == 'sumologic') { -%>
                              --log-driver fluentd --log-opt labels=app --label app=<%= name %> \
<% } -%>
<% if (dvalin) { -%>
                              -v /opt/dvalin.properties:/opt/daemon/dvalin.properties \
<% } -%>
                              ${!IMAGE}
          - DockerTag: !Ref SoftwareVersion
  AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      HealthCheckGracePeriod: 600
      HealthCheckType: ELB
      DesiredCapacity: '1'
      LaunchConfigurationName: !Ref LaunchConfig
      MaxSize: '2'
      MinSize: '1'
      TargetGroupARNs:
        - !Ref HTTPTargetGroup
        - !Ref HTTPSTargetGroup
      Tags:
        - Key: COST
          Value: <%= cost %>
          PropagateAtLaunch: 'true'
        - Key: Customer
          Value: <%= customer %>
          PropagateAtLaunch: 'true'
        - Key: Name
          Value: <%= name %>Server
          PropagateAtLaunch: 'true'
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB
    UpdatePolicy:
      AutoScalingScheduledAction:
        IgnoreUnmodifiedGroupSizeProperties: 'true'
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        WaitOnResourceSignals: 'true'
        PauseTime: PT10M
  Route53Record:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneName: '<%= domain %>.'
      Name: '<%= hostname %>'
      Type: 'A'
      AliasTarget:
        DNSName: !GetAtt LoadBalancer.DNSName
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
Outputs:
  LoadBalancer:
    Description: 'The ELB address'
    Value: !GetAtt LoadBalancer.DNSName
